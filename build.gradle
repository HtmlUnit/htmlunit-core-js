
apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'


group = "org.htmlunit"
archivesBaseName = "htmlunit-core-js"
version = "3.3.0"


jar {
    manifest {
        attributes([
                    'Application-Name': archivesBaseName,
                    'Version': project.version,
                    'Date': new Date().format("yyyy-MM-dd HH-mm-ss z")
                    ], 'Application')
        attributes([
                    'Java-Runtime': System.getProperty('java.runtime.name'),
                    'Java-Version': System.getProperty('java.runtime.version'),
                    'Java-Target': targetCompatibility,
                    'OS-Name': System.getProperty('os.name'),
                    'OS-Version': System.getProperty('os.version')
                    ], 'Build')
    }
}

sourceSets {
    main {
        java {
            srcDirs 'target/repackaged-rhino/src'
            exclude '**/*.properties'
        }
        resources {
            srcDirs 'target/repackaged-rhino/src'
            include '**/*.properties'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}


task generateSources() {
    doLast {
        delete('target/repackaged-rhino/src/org/htmlunit/corejs')

        copy {
            into 'target/repackaged-rhino/src/org/htmlunit/corejs'
            from '../htmlunit-rhino-fork/src/org/mozilla'
            from ('../htmlunit-rhino-fork/toolsrc/org/mozilla') {
                include 'javascript/tools/debugger/**/*.java'
                include 'javascript/tools/shell/**/*.java'
                include 'javascript/tools/*.java'
            }
            filter { line -> line.replaceAll('org\\.mozilla', 'org.htmlunit.corejs') }
            filter { line -> line.replaceAll('org/mozilla', 'org/htmlunit/corejs') }
            
            // filter { line -> line.replaceAll('public static final int VERSION_', '// HtmlUnit public static final int VERSION_') }

            filter { line -> line.replaceAll('version == Context.VERSION_1_0', '/* HtmlUnit version == #Context.VERSION_1_0 */ false') }
            filter { line -> line.replaceAll('version == Context.VERSION_1_1', '/* HtmlUnit version == #Context.VERSION_1_1 */ false') }
            filter { line -> line.replaceAll('version == Context.VERSION_1_2', '/* HtmlUnit version == #Context.VERSION_1_2 */ false') }
            filter { line -> line.replaceAll('version <= Context.VERSION_1_3', '/* HtmlUnit version <= #Context.VERSION_1_3 */ false') }
            filter { line -> line.replaceAll('version < Context.VERSION_1_3', '/* HtmlUnit version < #Context.VERSION_1_3 */ false') }
            filter { line -> line.replaceAll('version <= Context.VERSION_1_4', '/* HtmlUnit version <= #Context.VERSION_1_4 */ false') }
            filter { line -> line.replaceAll('version >= Context.VERSION_1_4', '/* HtmlUnit version >= #Context.VERSION_1_4 */ true') }
            filter { line -> line.replaceAll('version >= Context.VERSION_1_6', '/* HtmlUnit version >= #Context.VERSION_1_6 */ true') }
            filter { line -> line.replaceAll('cx.version < Context.VERSION_ES6', '/* HtmlUnit cx.version < #Context.VERSION_ES6 */ false') }
            filter { line -> line.replaceAll('version < Context.VERSION_ES6', '/* HtmlUnit version < #Context.VERSION_ES6 */ false') }

            filter { line -> line.replaceAll('version == Context.VERSION_DEFAULT', '/* HtmlUnit version == #Context.VERSION_DEFAULT */ false') }
            filter { line -> line.replaceAll('version != Context.VERSION_DEFAULT', '/* HtmlUnit version != #Context.VERSION_DEFAULT */ true') }
            filter { line -> line.replaceAll('version == VERSION_DEFAULT \\|\\| version >= VERSION_1_3', '/* HtmlUnit version == #VERSION_DEFAULT \\|\\| version >= #VERSION_1_3 */ true') }

            filter { line -> line.replaceAll('languageVersion < Context.VERSION_ES6', '/* HtmlUnit languageVersion < #Context.VERSION_ES6 */ false') }

            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) == Context.VERSION_1_2', '/* HtmlUnit cx.getLanguageVersion\\(\\) == #Context.VERSION_1_2 */ false') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) != Context.VERSION_1_2', '/* HtmlUnit cx.getLanguageVersion\\(\\) != #Context.VERSION_1_2 */ true') }
            filter { line -> line.replaceAll('getLanguageVersion\\(\\) != Context.VERSION_1_2', '/* HtmlUnit getLanguageVersion\\(\\) != #Context.VERSION_1_2 */ true') }
            filter { line -> line.replaceAll('state.cx.getLanguageVersion\\(\\) >= Context.VERSION_ES6', '/* HtmlUnit state.cx.getLanguageVersion\\(\\) >= #Context.VERSION_ES6 */ true') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) >= Context.VERSION_ES6', '/* HtmlUnit cx.getLanguageVersion\\(\\) >= #Context.VERSION_ES6 */ true') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) < Context.VERSION_ES6', '/* HtmlUnit cx.getLanguageVersion\\(\\) < #Context.VERSION_ES6 */ false') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) < Context.VERSION_1_5', '/* HtmlUnit cx.getLanguageVersion\\(\\) < #Context.VERSION_1_5 */ false') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) < Context.VERSION_1_6', '/* HtmlUnit cx.getLanguageVersion\\(\\) < #Context.VERSION_1_6 */ false') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) <= Context.VERSION_1_7', '/* HtmlUnit cx.getLanguageVersion\\(\\) < #Context.VERSION_1_7 */ false') }
            filter { line -> line.replaceAll('cx.getLanguageVersion\\(\\) >= Context.VERSION_1_8', '/* HtmlUnit cx.getLanguageVersion\\(\\) >= #Context.VERSION_1_8 */ true') }
            filter { line -> line.replaceAll('env.getLanguageVersion\\(\\) >= Context.VERSION_ES6', '/* HtmlUnit env.getLanguageVersion\\(\\) >= #Context.VERSION_ES6 */ true') }
            
            filter { line -> line.replaceAll('Context.getCurrentContext\\(\\).version >= Context.VERSION_ES6', '/* HtmlUnit Context.getCurrentContext\\(\\).version >= #Context.VERSION_ES6 */ true') }
            filter { line -> line.replaceAll('Context.getCurrentContext\\(\\).getLanguageVersion\\(\\) >= Context.VERSION_ES6', '/* HtmlUnit Context.getCurrentContext\\(\\).getLanguageVersion\\(\\) >= #Context.VERSION_ES6 */ true') }
            filter { line -> line.replaceAll('Context.getContext\\(\\).getLanguageVersion\\(\\) < Context.VERSION_ES6', '/* HtmlUnit Context.getContext\\(\\).getLanguageVersion\\(\\) < #Context.VERSION_ES6 */ false') }
            
            filter { line -> line.replaceAll('compilerEnv.getLanguageVersion\\(\\) == Context.VERSION_1_2', '/* HtmlUnit compilerEnv.getLanguageVersion\\(\\) == #Context.VERSION_1_2 */ false') }
            filter { line -> line.replaceAll('compilerEnv.getLanguageVersion\\(\\) < Context.VERSION_1_8', '/* HtmlUnit compilerEnv.getLanguageVersion\\(\\) < #Context.VERSION_1_8 */ false') }
            filter { line -> line.replaceAll('compilerEnv.getLanguageVersion\\(\\) >= Context.VERSION_1_8', '/* HtmlUnit compilerEnv.getLanguageVersion\\(\\) >= #Context.VERSION_1_8 */ true') }
            filter { line -> line.replaceAll('parser.compilerEnv.getLanguageVersion\\(\\) >= Context.VERSION_ES6', '/* HtmlUnit parser.compilerEnv.getLanguageVersion\\(\\) >= #Context.VERSION_ES6 */ true') }
            filter { line -> line.replaceAll('parser.compilerEnv.getLanguageVersion\\(\\) < Context.VERSION_1_7', '/* HtmlUnit parser.compilerEnv.getLanguageVersion\\(\\) < #Context.VERSION_1_7 */ false') }
            filter { line -> line.replaceAll('compilerEnv.getLanguageVersion\\(\\) >= Context.VERSION_ES6', '/* HtmlUnit compilerEnv.getLanguageVersion\\(\\) >= #Context.VERSION_ES6 */ true') }
            filter { line -> line.replaceAll('compilerEnv.getLanguageVersion\\(\\) < Context.VERSION_ES6', '/* HtmlUnit compilerEnv.getLanguageVersion\\(\\) < #Context.VERSION_ES6 */ false') }
        }

        delete('target/rhinoDiff.txt')
        exec {
            workingDir '../htmlunit-rhino-fork'
            commandLine 'cmd', '/c', '"git.exe" diff upstream/master..HEAD >> ..\\htmlunit-core-js\\target\\rhinoDiff.txt'
        }
    }
}
compileJava.dependsOn generateSources


javadoc {
    options.addStringOption('Xdoclint:html', '-quiet')
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives sourcesJar, javadocJar
}


signing {
    sign configurations.archives
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.withXml {
                def root = asNode()

                root.appendNode("name", "HtmlUnit Core JS")

                def o = root.appendNode("organization")
                o.appendNode("name", "HtmlUnit")
                o.appendNode("url", "https://www.htmlunit.org/")

                root.appendNode("packaging", "jar")
                root.appendNode("url", "https://www.htmlunit.org")
                root.appendNode('description', "HtmlUnit adaptation of Mozilla Rhino Javascript engine for Java. Changes are documented by a diff (rhinoDiff.txt) contained in the generated jar files.")

                def l = root.appendNode("licenses").appendNode("license")
                l.appendNode("name", "Mozilla Public License, Version 2.0")
                l.appendNode("url", "http://www.mozilla.org/MPL/2.0/index.txt")
                l.appendNode("distribution", "repo")

                def scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git@github.com:HtmlUnit/htmlunit-core-js.git")
                scm.appendNode("developerConnection", "scm:git:git@github.com:HtmlUnit/htmlunit-core-js.git")
                scm.appendNode("url", "https://github.com/htmlunit")

                def ds = root.appendNode("developers")
                def d = ds.appendNode("developer")
                d.appendNode("name", "Mozilla Rhino Team")
                d.appendNode("id", "MozillaRhinoTeam")
                d = ds.appendNode("developer")
                d.appendNode("name", "HtmlUnit Team")
                d.appendNode("id", "HtmlUnitTeam")
            }
        }
    }
}
